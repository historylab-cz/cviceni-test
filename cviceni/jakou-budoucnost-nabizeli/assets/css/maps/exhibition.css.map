{"version":3,"file":"../exhibition.css","sources":["exhibition.scss","tools/vendor/_modular-scale.scss","tools/vendor/modular-scale/_ratios.scss","tools/vendor/modular-scale/_tests.scss","tools/vendor/modular-scale/_pow.scss","tools/vendor/modular-scale/_calc.scss","tools/vendor/modular-scale/_generate-list.scss","tools/vendor/modular-scale/_sort-list.scss","tools/vendor/modular-scale/_round-px.scss","tools/vendor/modular-scale/_function.scss","tools/vendor/modular-scale/_function-list.scss","tools/vendor/modular-scale/_respond.scss","tools/vendor/_media-queries.scss","tools/libs/_libs.scss","tools/libs/_toolbox.scss","tools/libs/_animations.scss","tools/libs/_helpers.scss","variables/_variables.scss"],"sourcesContent":["@import \"tools/vendor/modular-scale\";\r\n@import \"tools/vendor/media-queries\";\r\n@import \"tools/libs/libs\";\r\n@import \"variables/variables\";\r\n\r\n$header-height: $base-unit * 4 + $base-unit * 3;\r\n\r\nbody,\r\nhtml {\r\n  overflow-y: initial;\r\n  -webkit-overflow-scrolling: touch;\r\n}\r\n\r\nbody {\r\n  min-height: 100%;\r\n  background: linear-gradient(135deg, $bg-color-2 0%, #5352A6 100%);\r\n}\r\n\r\n#page-exhibition {\r\n  text-align: center;\r\n}\r\n\r\nheader {\r\n  width: 100%;\r\n  height: $header-height;\r\n  padding: $base-unit * 1.5 $base-unit;\r\n  color: $bg-color-1;\r\n}\r\n\r\n#logo {\r\n  fill: currentColor;\r\n  height: $header-height - $base-unit * 3;\r\n}\r\n\r\nmain {\r\n  width: 100%;\r\n  height: 100%;\r\n  max-height: calc(100% - #{$header-height});\r\n\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-flow: column;\r\n}\r\n\r\n.section-cviceni {\r\n  flex: 1;\r\n\r\n  display: flex;\r\n  flex-flow: column;\r\n}\r\n\r\n.cviceni {\r\n  flex: 1;\r\n  position: relative;\r\n  overflow: hidden;\r\n  background-color: $bg-color-1;\r\n  color: $text-color;\r\n  font-size: ms(4);\r\n\r\n  display: flex;\r\n  flex-flow: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  &:not(:last-child) {\r\n    border-bottom: 2px solid $bg-color;\r\n  }\r\n\r\n  &:hover {\r\n    // border-bottom: 0;\r\n    font-weight: bold;\r\n    color: $bg-color;\r\n    background-color: transparent;\r\n\r\n    &::before {\r\n      opacity: .3;\r\n    }\r\n\r\n    span {\r\n      &::before {\r\n        position: absolute;\r\n        content: \"Cvičení\";\r\n        text-transform: uppercase;\r\n        bottom: calc(100% + #{$base-unit * .5});\r\n        left: 0;\r\n        right: 0;\r\n        text-align: center;\r\n        // left: 50%;\r\n        // transform: translateX(-50%);\r\n        font-size: .4em;\r\n        font-weight: normal;\r\n      }\r\n    }\r\n  }\r\n\r\n  &::before {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n    opacity: 0;\r\n    // filter: blur(2px);\r\n  }\r\n\r\n  span {\r\n    position: relative;\r\n  }\r\n}\r\n\r\n#cviceni-masaryk-lany {\r\n  &::before {\r\n    background-position: 50% 10%;\r\n    background-image: url(\"../img/tgm-hornik.jpg\");\r\n  }\r\n}\r\n\r\n#cviceni-skolni-obraz {\r\n  &::before {\r\n    background-position: 50% 35%;\r\n    background-image: url(\"../img/tgm_tabor_1918.jpg\");\r\n  }\r\n}\r\n\r\n.section-partners {\r\n  padding: $base-unit;\r\n  background-color: $bg-color;\r\n\r\n  img {\r\n    height: $base-unit * 2;\r\n  }\r\n}\r\n","@import \"modular-scale/ratios\";\r\n\r\n$ms-base:  1em      !default;\r\n$ms-ratio: $golden  !default;\r\n$ms-range: null     !default;\r\n$ms-fluid: true     !default;\r\n\r\n@import \"modular-scale/tests\";\r\n\r\n@import \"modular-scale/pow\";\r\n@import \"modular-scale/calc\";\r\n@import \"modular-scale/generate-list\";\r\n@import \"modular-scale/sort-list\";\r\n@import \"modular-scale/round-px\";\r\n@import \"modular-scale/function\";\r\n@import \"modular-scale/function-list\";\r\n\r\n@import \"modular-scale/respond\";","// Golden ratio\r\n$phi              : 1.618034          ;\r\n$golden           : $phi              ;\r\n\r\n$double-octave    : 4                 ;\r\n$major-twelfth    : 3                 ;\r\n$major-eleventh   : 2.666666667       ;\r\n$major-tenth      : 2.5               ;\r\n$octave           : 2                 ;\r\n$major-seventh    : 1.875             ;\r\n$minor-seventh    : 1.777777778       ;\r\n$major-sixth      : 1.666666667       ;\r\n$minor-sixth      : 1.6               ;\r\n$fifth            : 1.5               ;\r\n$augmented-fourth : 1.41421           ;\r\n$fourth           : 1.333333333       ;\r\n$major-third      : 1.25              ;\r\n$minor-third      : 1.2               ;\r\n$major-second     : 1.125             ;\r\n$minor-second     : 1.066666667       ;","// Feature testing\r\n\r\n\r\n// Test if the pow() function exists\r\n@function ms-pow-exists() {\r\n  @if pow(4, 2) == 16 {\r\n    @return true;\r\n  }\r\n  @return false;\r\n}\r\n\r\n$MS-pow-exists: ms-pow-exists();\r\n\r\n// Test if MS was installed via the gem\r\n@function ms-gem-exists() {\r\n  @if ms-gem-installed() == true {\r\n    @return true;\r\n  }\r\n  @return false;\r\n}\r\n\r\n$MS-gem-exists: ms-gem-exists();","// If a native exponent function doesnt exist\r\n// this one is needed.\r\n@function ms-pow($Base, $Exponent) {\r\n\r\n  // Find and remove unit.\r\n  // Avoids messyness with unit calculations\r\n  $Unit: $Base * 0 + 1;\r\n  $Base: $Base/$Unit;\r\n\r\n  // This function doesnt support non-interger exponents.\r\n  // Warn the user about why this is breaking.\r\n\t@if round($Exponent) != $Exponent {\r\n\t\t@warn \"Unfortunately, you need Compass to use non-integer exponents\";\r\n\t}\r\n\r\n  // Set up the loop, priming the return with the base.\r\n\t$Return: $Base;\r\n\r\n  // If the number is positive, multiply it.\r\n  @if $Exponent > 0 {\r\n    // Basic feedback loop as exponents\r\n    // are recursivley multiplied numbers.\r\n    @for $i from 1 to $Exponent {\r\n      $Return: $Return * $Base;\r\n    }\r\n  }\r\n\r\n  // If the number is 0 or negitive\r\n  // divide instead of multiply.\r\n  @else {\r\n    // Libsass doesnt allow negitive values in loops\r\n    @for $i from (-1 + 1) to (abs($Exponent) + 1) {\r\n      $Return: $Return / $Base;\r\n    }\r\n  }\r\n\r\n  // Return is now compounded redy to be returned.\r\n  // Add the unit back onto the number.\r\n\t@return $Return * $Unit;\r\n}","@function ms-calc($Value, $Base: $ms-base, $Ratio: $ms-ratio) {\r\n  \r\n  // If pow exists use it.\r\n  // It supports non-interger values!\r\n  @if $MS-pow-exists {\r\n\r\n    // The formula for figuring out modular scales is:\r\n    // (r^v)*b\r\n    @return pow($Ratio, $Value) * $Base;\r\n  }\r\n\r\n  // If not, use ms-pow().\r\n  // Not as fast or capable of non-integer exponents.\r\n  @else {\r\n    @return ms-pow($Ratio, $Value) * $Base;\r\n  }\r\n}","@function ms-reverse-list($list) {\r\n  @if length($list) > 1 {\r\n    @if nth($list, 1) > nth($list, length($list)) {\r\n      $MS-reversed-list: ();\r\n      @each $Value in $list {\r\n        $MS-reversed-list: join($Value, $MS-reversed-list);\r\n      }\r\n      @return $MS-reversed-list;\r\n    }\r\n  }\r\n  @return $list;\r\n}\r\n\r\n\r\n@function ms-generate-list($Value: 0, $Bases: $ms-base, $Ratios: $ms-ratio) {\r\n\r\n  // Create blank lists\r\n  $MS-list: ();\r\n  $MS-base-list: ();\r\n\r\n  // Loop through each ratio AND each base\r\n  // to generate all possibilities.\r\n  @each $Ratio in $Ratios {\r\n    @each $Base in $Bases {\r\n      \r\n      // Set base variables\r\n      $MS-base-list: ();\r\n      $Base-counter: 0;\r\n      \r\n      // Seed list with an initial value\r\n      $MS-base-list: $Base;\r\n      \r\n      // Find values on a positive scale\r\n      @if $Value >= 0 {\r\n        \r\n        // Find lower values on the scale\r\n        $Base-counter: -1;\r\n        @while ms-calc($Base-counter, $Base, $Ratio) >= nth($Bases, 1) {\r\n          $MS-base-list: join($MS-base-list, ms-calc($Base-counter, $Base, $Ratio));\r\n          $Base-counter: $Base-counter - 1;\r\n        }\r\n        \r\n        // Ensure the list is smallest to largest\r\n        $MS-base-list: ms-reverse-list($MS-base-list);\r\n\r\n        // Find higher possible values on the scale\r\n        $Base-counter: 1;\r\n        @while ms-calc($Base-counter, $Base, $Ratio) <= ms-calc($Value, nth($Bases, 1), $Ratio) {\r\n          $MS-base-list: join($MS-base-list, ms-calc($Base-counter, $Base, $Ratio));\r\n          $Base-counter: $Base-counter + 1;\r\n        }\r\n      }\r\n\r\n      // Find values on a negitive scale\r\n      @else {\r\n        \r\n        // Find lower values on the scale\r\n        $Base-counter: 1;\r\n        @while ms-calc($Base-counter, $Base, $Ratio) <= nth($Bases, 1) {\r\n          $MS-base-list: join($MS-base-list, ms-calc($Base-counter, $Base, $Ratio));\r\n          $Base-counter: $Base-counter + 1;\r\n        }\r\n\r\n        // Ensure the list is smallest to largest\r\n        $MS-base-list: ms-reverse-list($MS-base-list);\r\n\r\n        // Find higher possible values on the scale\r\n        $Base-counter: -1;\r\n        @while ms-calc($Base-counter, $Base, $Ratio) >= ms-calc($Value, nth($Bases, 1), $Ratio) {\r\n          $MS-calc: ms-calc($Base-counter, $Base, $Ratio);\r\n          // detect if the value excedes the main base value\r\n          @if $MS-calc < nth($Bases, 1) {\r\n            $MS-base-list: join($MS-base-list, $MS-calc);\r\n          }\r\n          $Base-counter: $Base-counter - 1;\r\n        }\r\n        \r\n        // Trim outlier base.\r\n        @if length($Bases) > 1 {\r\n          @for $i from 2 through length($Bases) {\r\n            @if nth($MS-base-list, 1) > nth($Bases, 1) {\r\n              $MS-new-list: ();\r\n              @for $i from 2 through length($MS-base-list) {\r\n                $MS-new-list: join($MS-new-list, nth($MS-base-list, $i));\r\n              }\r\n              $MS-base-list: $MS-new-list;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      \r\n      // reverse list if its largest to smallest\r\n      $MS-base-list: ms-reverse-list($MS-base-list);\r\n\r\n      // Add new possibilities to the master list\r\n      $MS-list: append($MS-list, $MS-base-list, comma);\r\n\r\n    }\r\n  }\r\n  \r\n  // After all the possibilities are found, output a master list\r\n  @return $MS-list;\r\n}","// List sorting via a modified merge-sort algorythmn\r\n// http://en.wikipedia.org/wiki/Merge_sort\r\n\r\n@function ms-merge($A, $B) {\r\n\r\n  $Return: ();\r\n\r\n  // Some empty lists get passed through\r\n  // so just pass the other list throguh\r\n  @if length($A) == 0 {\r\n    @return $B;\r\n  }\r\n\r\n  // If lists fit next to each other, just merge them\r\n  // This helps performance skipping the need to check each value\r\n  @if nth($A, length($A)) < nth($B, 1) {\r\n    @return join($A, $B);\r\n  }\r\n  @if nth($B, length($B)) < nth($A, 1) {\r\n    @return join($B, $A);\r\n  }\r\n\r\n  // Counters start at 1\r\n  $A-counter: 1;\r\n  $B-counter: 1;\r\n\r\n  // Start looping through all numbers in array\r\n  @while $A-counter <= length($A) and $B-counter <= length($B) {\r\n\r\n    // Check if the A value is smaller\r\n    // Uses or equal to avoid duplicate numbers\r\n    @if nth($A, $A-counter) <= nth($B, $B-counter) {\r\n      $Return: join($Return, nth($A, $A-counter));\r\n      $A-counter: $A-counter + 1;\r\n    }\r\n\r\n    // Check if the B value is smaller\r\n    @else if nth($A, $A-counter) > nth($B, $B-counter) {\r\n      $Return: join($Return, nth($B, $B-counter));\r\n      $B-counter: $B-counter + 1;\r\n    }\r\n  }\r\n\r\n  // Run through remainder values in the list\r\n  @while $A-counter <= length($A) {\r\n    $Current: nth($A, $A-counter);\r\n    @if $Current != nth($Return, length($Return)) {\r\n      $Return: join($Return, $Current);\r\n    }\r\n    $A-counter: $A-counter + 1;\r\n  }\r\n  @while $B-counter <= length($B) {\r\n    $Current: nth($B, $B-counter);\r\n    @if $Current != nth($Return, length($Return)) {\r\n      $Return: join($Return, $Current);\r\n    }\r\n    $B-counter: $B-counter + 1;\r\n  }\r\n\r\n  // Done! return is now sorted and complete\r\n  @return $Return;\r\n}\r\n\r\n\r\n\r\n// Pull it all together\r\n@function ms-sort-list($Lists) {\r\n\r\n  $Return: ();\r\n\r\n  @each $List in $Lists {\r\n    @if $Return == () {\r\n      $Return: $List;\r\n    }\r\n    @else {\r\n      $Return: ms-merge($List, $Return);\r\n    }\r\n  }\r\n\r\n  // final cleanup of repeated items\r\n  $Last: null;\r\n  $New-list: ();\r\n  @each $Item in $Return {\r\n    @if $Item != $Last {\r\n      $New-list: join($New-list, $Item);\r\n    }\r\n    $Last: $Item;\r\n  }\r\n  $Return: $New-list;\r\n\r\n\r\n  @return $Return;\r\n}","@function ms-round-px($Result) {\r\n  @if unit($Result) == 'px' {\r\n    @return round($Result);\r\n  }\r\n  @return $Result;\r\n}","// The main function that brings it all together\r\n@function ms($Value: 0, $Bases: $ms-base, $Ratios: $ms-ratio) {\r\n\r\n  // If no multi-base or multi-ratio stuff is going on\r\n  // then just retrn the basic calculaiton\r\n  @if length($Bases) == 1 and length($Ratios) == 1 {\r\n    @return ms-round-px(ms-calc($Value, $Bases, $Ratios));\r\n  }\r\n\r\n  // Do calculations directly in Ruby when avalible\r\n  @if $MS-gem-exists {\r\n\r\n    // Remove units from bases\r\n    $Unit: nth($Bases, 1) * 0 + 1; // Extracts the unit from the base\r\n    $Unitless-Bases: ();\r\n    @each $Base in $Bases {\r\n      $Base: $Base/$Unit;\r\n      $Unitless-Bases: join($Unitless-Bases, $Base);\r\n    }\r\n\r\n    // Calculate natively in Ruby\r\n    @return ms-round-px(ms-gem-func($Value, $Unitless-Bases, $Ratios) * $Unit);\r\n  }\r\n\r\n  // Generate a list of all possible values\r\n  $Return: ms-generate-list($Value, $Bases, $Ratios);\r\n\r\n  // Sort the generated lists\r\n  $Return: ms-sort-list($Return);\r\n\r\n  // Reverse list if its negitive.\r\n  @if $Value < 0 {\r\n    $MS-new-return: ();\r\n    @each $i in $Return {\r\n      $MS-new-return: join($i, $MS-new-return);\r\n    }\r\n    $Return: $MS-new-return;\r\n  }\r\n\r\n  // Normalize value for counting from 1\r\n  // Because CSS counts things from 1\r\n  // So Sass does as well\r\n  // So I get to write fun stuff like this\r\n  $Value: abs($Value) + 1;\r\n\r\n  // Find the correct value in the list\r\n  $Return: nth($Return, $Value);\r\n\r\n  @return ms-round-px($Return);\r\n}\r\n\r\n// Same function, different name, for good measure.\r\n@function modular-scale($Value: 0, $Bases: $ms-base, $Ratios: $ms-ratio) {\r\n  @return ms($Value, $Bases, $Ratios);\r\n}","// Outputs a list of values instead of a single value\r\n@function ms-list($Start: 0, $End: 0, $Bases: $ms-base, $Ratios: $ms-ratio) {\r\n  \r\n  // Seed results\r\n  $Positive-return: ();\r\n  $Negitive-return: ();\r\n  $Return: ();\r\n\r\n  @if $End >= 0 {\r\n    // Generate a list of all possible values\r\n    $Positive-return: ms-generate-list($End, $Bases, $Ratios);\r\n    \r\n    // Sort the generated lists\r\n    $Positive-return: ms-sort-list($Positive-return);\r\n\r\n    // Trim list\r\n    $Trim-list: ();\r\n    // If the starting value is a positive number\r\n    // trim the positive return from that\r\n    @if $Start >= 0 {\r\n      @for $i from ($Start + 1) through $End + 1 {\r\n        $Trim-list: join($Trim-list, nth($Positive-return, $i));\r\n      }\r\n    }\r\n    // If not, then include everything up to the end.\r\n    @else {\r\n      @for $i from 1 through $End + 1 {\r\n        $Trim-list: join($Trim-list, nth($Positive-return, $i));\r\n      }\r\n    }\r\n    $Positive-return: $Trim-list;\r\n  }\r\n  \r\n  // Generate a negitive list\r\n  @if $Start < 0 {\r\n    // Generate a list of all possible values\r\n    $Negitive-return: ms-generate-list($Start, $Bases, $Ratios);\r\n    \r\n    // Sort the generated lists\r\n    $Negitive-return: ms-sort-list($Negitive-return);\r\n    \r\n    // Reverse negitive list results.\r\n    $MS-new-return: ();\r\n    @each $i in $Negitive-return {\r\n      $MS-new-return: join($i, $MS-new-return);\r\n    }\r\n    $Negitive-return: $MS-new-return;\r\n\r\n    // Trim list\r\n    $Trim-list: ();\r\n    @if $End < 0 {\r\n      @for $i from abs($End) through (abs($Start) + 2) {\r\n        $Trim-list: join(nth($Negitive-return, $i), $Trim-list);\r\n      }\r\n    }\r\n    @else {\r\n      @for $i from 2 through (abs($Start) + 1) {\r\n        $Trim-list: join(nth($Negitive-return, $i), $Trim-list);\r\n      }\r\n    }\r\n    $Negitive-return: $Trim-list;\r\n  }\r\n  \r\n  // Join both positive and negitive possibilities.\r\n  $Return: join($Negitive-return, $Positive-return);\r\n\r\n  @return $Return;\r\n}\r\n","// Stripping units is rarely a best practice and this function\r\n// should not be used elsewhere\r\n@function ms-unitless($val) {\r\n  $val: $val / ($val - $val + 1);\r\n  @return $val;\r\n}\r\n\r\n// Search config for values\r\n@function ms-range($x,$y,$range:$ms-range) {\r\n  @return nth(nth($range,$x),$y);\r\n}\r\n\r\n// Generate calc() function\r\n@function ms-respond-calc($value, $n, $range: $ms-range, $base: $ms-base) {\r\n  $val1: ms($value,$base,ms-range($n,1,$range));\r\n  $val2: ms($value,$base,ms-range($n+1,1,$range));\r\n  $break1: ms-range($n,2,$range);\r\n  $break2: ms-range($n+1,2,$range);\r\n  $diff: ms-unitless($val2) - ms-unitless($val1);\r\n  @if $ms-fluid {\r\n    @return calc( #{$val1} + #{$diff} * ( ( 100vw - #{$break1}) / #{ms-unitless($break2) - ms-unitless($break1)} ) );\r\n  } @else {\r\n    @return ms($value,$base,ms-range($n,1,$range));\r\n  }\r\n}\r\n\r\n// Main responsive mixin\r\n@mixin ms-respond($property, $value, $range: $ms-range, $base: $ms-base) {\r\n  // If there is no responsive config, just output the property and value\r\n  @if $ms-range == null {\r\n    #{$property}: ms($value,$base,$ms-ratio);\r\n  } @else {\r\n\r\n    // Initial value\r\n    #{$property}: ms($value,$base,ms-range(1,1,$range));\r\n\r\n    // Loop through breakpoints\r\n    @for $i from 1 through (length($range) - 1) {\r\n      @media (min-width: ms-range($i,2,$range)) and (max-width: ms-range($i+1,2,$range)) {\r\n        #{$property}: ms-respond-calc($value, $i, $range, $base);\r\n      }\r\n    }\r\n\r\n    // Final breakpoint is just an override value\r\n    @media (min-width: ms-range(length($range),2,$range)) {\r\n      #{$property}: ms($value,$base,ms-range(length($range),1,$range));\r\n    }\r\n  }\r\n}","//  Author: Rafal Bromirski\r\n//  www: http://rafalbromirski.com/\r\n//  github: http://github.com/paranoida/sass-mediaqueries\r\n//\r\n//  Licensed under a MIT License\r\n//\r\n//  Version:\r\n//  1.6.1\r\n\r\n// --- generator ---------------------------------------------------------------\r\n\r\n@mixin mq($args...) {\r\n  $media-type: 'only screen';\r\n  $media-type-key: 'media-type';\r\n  $args: keywords($args);\r\n  $expr: '';\r\n\r\n  @if map-has-key($args, $media-type-key) {\r\n    $media-type: map-get($args, $media-type-key);\r\n    $args: map-remove($args, $media-type-key);\r\n  }\r\n\r\n  @each $key, $value in $args {\r\n    @if $value {\r\n      $expr: \"#{$expr} and (#{$key}: #{$value})\";\r\n    }\r\n  }\r\n\r\n  @media #{$media-type} #{$expr} {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- screen ------------------------------------------------------------------\r\n\r\n@mixin screen($min, $max, $orientation: false) {\r\n  @include mq($min-width: $min, $max-width: $max, $orientation: $orientation) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin max-screen($max) {\r\n  @include mq($max-width: $max) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin min-screen($min) {\r\n  @include mq($min-width: $min) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin screen-height($min, $max, $orientation: false) {\r\n  @include mq($min-height: $min, $max-height: $max, $orientation: $orientation) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin max-screen-height($max) {\r\n  @include mq($max-height: $max) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin min-screen-height($min) {\r\n  @include mq($min-height: $min) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- hdpi --------------------------------------------------------------------\r\n\r\n@mixin hdpi($ratio: 1.3) {\r\n  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),\r\n  only screen and (min-resolution: #{round($ratio*96)}dpi) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- hdtv --------------------------------------------------------------------\r\n\r\n@mixin hdtv($standard: '1080') {\r\n  $min-width: false;\r\n  $min-height: false;\r\n\r\n  $standards: ('720p', 1280px, 720px)\r\n              ('1080', 1920px, 1080px)\r\n              ('2K', 2048px, 1080px)\r\n              ('4K', 4096px, 2160px);\r\n\r\n  @each $s in $standards {\r\n    @if $standard == nth($s, 1) {\r\n      $min-width: nth($s, 2);\r\n      $min-height: nth($s, 3);\r\n    }\r\n  }\r\n\r\n  @include mq(\r\n    $min-device-width: $min-width,\r\n    $min-device-height: $min-height,\r\n    $min-width: $min-width,\r\n    $min-height: $min-height\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone4 -----------------------------------------------------------------\r\n\r\n@mixin iphone4($orientation: false) {\r\n  $min: 320px;\r\n  $max: 480px;\r\n  $pixel-ratio: 2;\r\n  $aspect-ratio: '2/3';\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $device-aspect-ratio: $aspect-ratio,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone5 -----------------------------------------------------------------\r\n\r\n@mixin iphone5($orientation: false) {\r\n  $min: 320px;\r\n  $max: 568px;\r\n  $pixel-ratio: 2;\r\n  $aspect-ratio: '40/71';\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $device-aspect-ratio: $aspect-ratio,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone6 -----------------------------------------------------------------\r\n\r\n@mixin iphone6($orientation: false) {\r\n  $min: 375px;\r\n  $max: 667px;\r\n  $pixel-ratio: 2;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone6 plus ------------------------------------------------------------\r\n\r\n@mixin iphone6-plus($orientation: false) {\r\n  $min: 414px;\r\n  $max: 736px;\r\n  $pixel-ratio: 3;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- ipad (all) --------------------------------------------------------------\r\n\r\n@mixin ipad($orientation: false) {\r\n  $min: 768px;\r\n  $max: 1024px;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- ipad-retina -------------------------------------------------------------\r\n\r\n@mixin ipad-retina($orientation: false) {\r\n  $min: 768px;\r\n  $max: 1024px;\r\n  $pixel-ratio: 2;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- orientation -------------------------------------------------------------\r\n\r\n@mixin landscape() {\r\n  @include mq($orientation: landscape) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin portrait() {\r\n  @include mq($orientation: portrait) {\r\n    @content;\r\n  }\r\n}\r\n","@import \"toolbox\";\r\n@import \"animations\";\r\n@import \"helpers\";\r\n\r\n","// ==================================================\r\n// Colors\r\n// ==================================================\r\n\r\n@function hsb($h-hsb, $s-hsb, $b-hsb, $a: 1) {\r\n  @if $b-hsb == 0 {\r\n    @return hsla(0, 0, 0, $a)\r\n  } @else {\r\n    $l-hsl: ($b-hsb/2) * (2 - ($s-hsb/100));\r\n    $s-hsl: ($b-hsb * $s-hsb) / if($l-hsl < 50, $l-hsl * 2, 200 - $l-hsl * 2);\r\n    @return hsla($h-hsb, $s-hsl, $l-hsl, $a);\r\n  }\r\n}\r\n\r\n// ==================================================\r\n// Numbers & Math\r\n// ==================================================\r\n\r\n@function strip-unit($num) {\r\n  @return $num / ($num * 0 + 1);\r\n}\r\n\r\n// ==================================================\r\n// Typography\r\n// ==================================================\r\n\r\n// map the breakpoints\r\n// — font-size for <html>\r\n@mixin font-size($fs-map) {\r\n  @each $fs-breakpoint, $fs-font-size in $fs-map {\r\n    @if $fs-breakpoint == null {\r\n      font-size: $fs-font-size;\r\n    }\r\n    @else {\r\n      @include mq($min-width: map-get($breakpoints, $fs-breakpoint)) {\r\n        font-size: $fs-font-size;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// — line-height for <body>\r\n@mixin line-height($fs-map) {\r\n  @each $fs-breakpoint, $fs-font-size in $fs-map {\r\n    @if $fs-breakpoint == null {\r\n      line-height: $base-line-height * strip-unit($fs-font-size) / 100;\r\n    }\r\n    @else if $fs-breakpoint == xxl {\r\n      @include mq($min-width: map-get($breakpoints, $fs-breakpoint)) {\r\n        line-height: $base-line-height * strip-unit(map-get($font-sizes, l)) / 100;\r\n      }\r\n    }\r\n    @else {\r\n      @include mq($min-width: map-get($breakpoints, $fs-breakpoint)) {\r\n        line-height: $base-line-height * strip-unit($fs-font-size) / 100;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@function ms-line-height($level) {\r\n  @return map-get($ms-line-heights, $level);\r\n}\r\n\r\n@mixin heading($heading, $heading-weight: 400) {\r\n  @if map-has-key($headings, $heading) {\r\n    $properties: map-get($headings, $heading);\r\n\r\n    font-size: nth($properties, 1);\r\n    line-height: nth($properties, 2);\r\n    margin-top: nth($properties, 3);\r\n    margin-bottom: nth($properties, 4);\r\n    font-weight: $heading-weight;\r\n    // color: $heading-color;\r\n  }\r\n}\r\n\r\n\r\n\r\n// ==================================================\r\n// Numbers & Math\r\n// ==================================================\r\n\r\n@mixin list-border-radius {\r\n  &:first-of-type {\r\n    border-top-left-radius: $base-border-radius;\r\n    border-top-right-radius: $base-border-radius;\r\n  }\r\n  &:last-of-type {\r\n    border-bottom-left-radius: $base-border-radius;\r\n    border-bottom-right-radius: $base-border-radius;\r\n  }\r\n}\r\n","@keyframes fadeIn {\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n}\r\n",".hidden {\r\n  display: none !important;\r\n}\r\n","// ==================================================\r\n// Settings\r\n// ==================================================\r\n\r\n$theme: dark;\r\n\r\n\r\n// Modular scale\r\n// scale 1.25\r\n// 2.441rem\r\n// 1.953rem\r\n// 1.563rem\r\n// 1.25rem\r\n// 1rem\r\n// 0.8rem\r\n$ms-ratio: $major-third;\r\n$ms-base: 1rem;\r\n\r\n\r\n\r\n// ==================================================\r\n// Breakpoints\r\n// ==================================================\r\n\r\n// Extra small devices (portrait phones, less than 576px)\r\n$screen-xs: 320px;\r\n// Small devices (landscape phones, 576px and up)\r\n$screen-s: 576px;\r\n// Medium devices (tablets, 768px and up)\r\n$screen-m: 768px;\r\n// Large devices (desktops, 1024px and up)\r\n$screen-l: 1024px;\r\n// Extra large devices (large desktops, 1200px and up)\r\n$screen-xl: 1200px;\r\n$screen-xxl: 1600px;\r\n\r\n$breakpoints: (\r\n   xs: $screen-xs,\r\n    s: $screen-s,\r\n    m: $screen-m,\r\n    l: $screen-l,\r\n   xl: $screen-xl,\r\n  xxl: $screen-xxl\r\n) !default;\r\n\r\n\r\n\r\n// ==================================================\r\n// Typography\r\n// ==================================================\r\n\r\n// Fonts\r\n$base-font-family: \"Lato\", \"ff-meta-web-pro\", Helvetica, Verdana, sans-serif;\r\n$heading-font-family: \"Lato\", \"ff-meta-web-pro\", Helvetica, Verdana, sans-serif;\r\n$ui-font-family: \"Lato\", \"ff-meta-web-pro\", Helvetica, Verdana, sans-serif;\r\n$serif-font-family: \"Vesper\", \"ff-meta-serif-web-pro\", \"Times New Roman\", serif;\r\n// $line-height: 1.6rem;\r\n\r\n// Font Sizes\r\n$base-font-size: 100%;\r\n// Font Sizes for different media queries\r\n$font-sizes: (\r\n  null: 87.5%,\r\n  xs:   93.75%,\r\n  s:   106.25%,\r\n  m:   93.75%,\r\n  l:   100%,\r\n  xl:   106.25%,\r\n  xxl:   112.5%\r\n  ) !default;\r\n\r\n// Line height\r\n$base-line-height: 1.6rem;\r\n$heading-line-height: 1.2;\r\n$ms-line-heights: (\r\n  -4: $base-line-height * 0.55,\r\n  -3: $base-line-height * 0.625,\r\n  -2: $base-line-height * 0.75,\r\n  -1: $base-line-height * 0.875,\r\n  0: $base-line-height,\r\n  1: $base-line-height * 1.125,\r\n  2: $base-line-height * 1.5,\r\n  3: $base-line-height * 1.875,\r\n  4: $base-line-height * 2,\r\n  5: $base-line-height * 2.5,\r\n  6: $base-line-height * 3,\r\n  7: $base-line-height * 3,\r\n  8: $base-line-height * 4,\r\n  );\r\n\r\n// Vertical rhytm units\r\n$base-unit: $base-line-height;\r\n\r\n//\r\n// Headings Options\r\n// - size (rem),\r\n// - line height (rem),\r\n// - margin top (rem),\r\n// - margin bottom (rem)\r\n$headings: (\r\n  h1: (ms(4), ms-line-height(3), 0, $base-unit),\r\n  h2: (ms(2), ms-line-height(1), 0, $base-unit / 2),\r\n  h3: (ms(1), ms-line-height(1), 0, $base-unit / 2),\r\n  h4: (ms(0), ms-line-height(0), 0, 0),\r\n  h5: (ms(-1), ms-line-height(-1), 0, 0),\r\n  h6: (ms(-1), ms-line-height(-1), 0, 0)\r\n  ) !default;\r\n\r\n\r\n\r\n// ==================================================\r\n// Variables\r\n// ==================================================\r\n\r\n// Colors\r\n$base-color: hsb(2,10,99);\r\n$bg-color: $base-color;\r\n$bg-color-1: lighten(desaturate($bg-color, 5), 3);\r\n$bg-color-2: darken(desaturate($bg-color, 62), 38);\r\n\r\n@if $theme == light {\r\n  $bg-color-2: $bg-color;\r\n}\r\n\r\n$text-color: desaturate(darken($base-color, 85), 62);\r\n$action-color: hsb(1,74,82);\r\n$button-color: $action-color;\r\n$beauty-bush: #EEC5C3;\r\n$beauty-bush-gradient: desaturate(darken($beauty-bush, 2), 4), desaturate(darken($beauty-bush, 4), 8), desaturate(darken($beauty-bush, 6), 12), desaturate(darken($beauty-bush, 8), 16), desaturate(darken($beauty-bush, 10), 20), desaturate(darken($beauty-bush, 12), 24);\r\n\r\n// Border\r\n$base-border-color: transparent;\r\n$base-border: 1px solid $base-border-color;\r\n$base-border-radius: 3px;\r\n$box-shadow: 0 0 $base-unit * 2 rgba($text-color, .8);\r\n$box-shadow-small: 0 0 $base-unit rgba($text-color, .8);\r\n\r\n// Buttons\r\n$button-shadow: 0 0 $base-unit / 2 rgba(0, 0, 0, .2);\r\n\r\n// Animations\r\n$base-duration: .1s;\r\n$base-timing: ease-in-out;\r\n$transition-all: all $base-duration $base-timing;\r\n$timing-in: cubic-bezier(.62, 0, .8, .38);\r\n$timing-out: cubic-bezier(.2, .62, .38, 1);\r\n\r\n// SVG\r\n$svg-circle-size: $base-unit * 1.2;\r\n\r\n// Navigation\r\n$navigation-height: $base-unit * 1.875;\r\n\r\n// Text module - editor\r\n$editor-font-family: $serif-font-family;\r\n$editor-width: $base-unit * 27;\r\n\r\n$faksimile-width: $base-unit * 12;\r\n$faksimile-width-big: $base-unit * 20;\r\n\r\n$usertext-width: $base-unit * 20;\r\n\r\n// Layers\r\n$layer-fullscreen: 999999;\r\n$layer-magnifying-glass: $layer-fullscreen + 1;\r\n"],"names":[],"mappings":"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"}